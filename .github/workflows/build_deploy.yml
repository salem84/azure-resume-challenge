name: build-deploy

on: workflow_dispatch

env:
  AZURE_RESOURCEGROUP_NAME: RG_ACGResume
  #AZURE_FUNCTIONAPP_NAME: resume-functions  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'src/ResumeFunction'    # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.x'              # set this to the dotnet version to use
  #STORAGE_ACCOUNT_NAME: 'storageg37rfim3mloo4'

jobs:
  deploy-arm-template:
    runs-on: ubuntu-latest
    outputs:
      storageAccountName: ${{ steps.deploy.outputs.STORAGE_ACCOUNT_NAME }}
      functionAppName: ${{ steps.deploy.outputs.FUNCTION_APP_NAME }}
      functionUrl: ${{ steps.deploy.outputs.FUNCTION_URL }}
      publishProfile: ${{ steps.deploy.outputs.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
      cdnProfileName: ${{ steps.deploy.outputs.CDN_PROFILE_NAME }}
      cdnEndpointHostName: ${{ steps.deploy.outputs.CDN_ENDPOINT_HOSTNAME }}

    steps:
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Checkout
        uses: actions/checkout@v2
      
      # - name: Deploy ARM Template
      #   uses: azure/arm-deploy@v1
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
      #     template: ./deploy/main.json

      - name: Deploy BICEP template
        id: deploy
        shell: bash
        run: |
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          deploymentOutput=$(az deployment group create --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} --template-file ./deploy/main.bicep)

          storageAccountName=$(echo $deploymentOutput | jq -r .properties.outputs.storageAccountName.value)
          echo "Storage: $storageAccountName"
          echo "::set-output name=STORAGE_ACCOUNT_NAME::${storageAccountName}"

          functionAppName=$(echo $deploymentOutput | jq -r .properties.outputs.functionAppName.value)
          echo "Function Name: $functionAppName"
          echo "::set-output name=FUNCTION_APP_NAME::${functionAppName}"

          functionUrl=$(echo $deploymentOutput | jq -r .properties.outputs.functionUrl.value)
          echo "Function Url: $functionUrl"
          echo "::set-output name=FUNCTION_URL::${functionUrl}"

          echo "Get Function Publish Profile"
          publishProfile=$(az webapp deployment list-publishing-profiles --name ${functionAppName} --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} --xml)
          echo "::set-output name=AZURE_FUNCTIONAPP_PUBLISH_PROFILE::${publishProfile}"

          cdnProfileName=$(echo $deploymentOutput | jq -r .properties.outputs.cdnProfileName.value)
          echo "CDN Profile Name: $cdnProfileName"
          echo "::set-output name=CDN_PROFILE_NAME::${cdnProfileName}"

          cdnEndpointHostName=$(echo $deploymentOutput | jq -r .properties.outputs.cdnEndpointHostName.value)
          echo "CDN Endpoint HostName: $cdnEndpointHostName"
          echo "::set-output name=CDN_ENDPOINT_HOSTNAME::${cdnEndpointHostName}"

          # Enable static site
          az storage blob service-properties update --account-name $storageAccountName --static-website --404-document 404.html --index-document index.html

      - name: Azure Logout
        run: az logout

  azure-function:
    runs-on: ubuntu-latest
    needs: deploy-arm-template
    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd

      - name: 'Deploy Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ needs.deploy-arm-template.outputs.functionAppName }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ needs.deploy-arm-template.outputs.publishProfile }}

  nuxt:
    runs-on: ubuntu-latest
    needs: [deploy-arm-template]
    defaults:
      run:
        working-directory: resume

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v2.1.2
        with:
          check-latest: true

      - name: Cache node_modules üì¶
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies üë®üèª‚Äçüíª
        run: npm ci

      - name: Build
        run: |
          export FUNCTION_BASE_URL=${{needs.deploy-arm-template.outputs.functionUrl}}
          echo "Function: $FUNCTION_BASE_URL"
          npm run generate
          ls -l dist/*

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          # Be careful of azcliversion
          azcliversion: 2.0.72
          inlineScript: |
            echo "Deploy to StorageAccount..."
            az storage blob upload-batch --account-name ${{needs.deploy-arm-template.outputs.storageAccountName}} -d '$web' -s './resume/dist'

      - name: Purge CDN endpoint
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az cdn endpoint purge --content-paths  "/*" --profile-name ${{needs.deploy-arm-template.outputs.cdnProfileName}} --name ${{needs.deploy-arm-template.outputs.cdnEndpointHostName}} --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }}


      - name: Azure Logout
        run: az logout
